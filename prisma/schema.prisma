// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FileType {
  photo
  document
}

enum ConversationState {
  waitingForCommand
  onboarding
  books
  budget
  budgets
  incomes
  accounts
  categories
  limits
  payments
  newExpense
  expense
  expenses
  transactions
}

model Files {
  id         Int       @id @default(autoincrement())
  fileId     String
  fileType   FileType
  aiItems    String[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  expense    Expense?  @relation(fields: [expenseId], references: [id])
  expenseId  Int?
  paymentId  Int?
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])
  validFrom  DateTime
}

model ChatGroup {
  chatId    BigInt   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
}

model Conversation {
  chatId    BigInt            @id @unique
  state     ConversationState @default(waitingForCommand)
  data      Json
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model User {
  id             BigInt      @id @unique
  firstName      String
  timezone       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  books          Book[]
  bookSelectedId Int?
  expenses       Expense[]
  shareBooks     ShareBook[]
}

model ConversionRate {
  id        Int      @id @default(autoincrement())
  from      String
  to        String
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
}

model ShareBook {
  key             String   @id @unique @default(uuid())
  bookId          Int
  book            Book     @relation(fields: [bookId], references: [id])
  shareWithUserId BigInt?
  shareWithuser   User?    @relation(fields: [shareWithUserId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Book {
  id              Int              @id @default(autoincrement())
  title           String
  ownerId         BigInt
  owner           User             @relation(fields: [ownerId], references: [id])
  shares          ShareBook[]
  accounts        Account[]
  categories      Category[]
  expenses        Expense[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  conversionRates ConversionRate[]
  chatGroups      ChatGroup[]
  limits          Limit[]
  incomes         Income[]
}

model Account {
  id          Int       @id @default(autoincrement())
  description String
  expenses    Expense[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  book        Book      @relation(fields: [bookId], references: [id])
  bookId      Int
}

model Expense {
  id          Int            @id @default(autoincrement())
  description String
  categoryId  Int?
  category    Category?      @relation(fields: [categoryId], references: [id])
  accountId   Int
  account     Account        @relation(fields: [accountId], references: [id])
  amountId    Int            @unique
  amount      AmountCurrency @relation(fields: [amountId], references: [id])
  files       Files[]
  notes       String?
  createdById BigInt
  createdBy   User           @relation(fields: [createdById], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  book        Book           @relation(fields: [bookId], references: [id])
  bookId      Int
}

model Income {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  book        Book     @relation(fields: [bookId], references: [id])
  bookId      Int
  salary      Salary[]
}

model Salary {
  id        Int            @id @default(autoincrement())
  amountId  Int            @unique
  amount    AmountCurrency @relation(fields: [amountId], references: [id])
  validFrom DateTime
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  incomeId  Int
  income    Income         @relation(fields: [incomeId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  limits      Limit[]
  isPayment   Boolean   @default(false)
  expenses    Expense[]
  book        Book      @relation(fields: [bookId], references: [id])
  bookId      Int
  files       Files[]
}

model AmountCurrency {
  id        Int       @id @default(autoincrement())
  amount    Float
  currency  String
  limits    Limit[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expenses  Expense[]
  Salary    Salary?
}

model Limit {
  id             Int            @id @default(autoincrement())
  amountId       Int            @unique
  amount         AmountCurrency @relation(fields: [amountId], references: [id])
  ignoreInBudget Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  validFrom      DateTime
  bookId         Int
  book           Book           @relation(fields: [bookId], references: [id])
  categoryId     Int
  category       Category       @relation(fields: [categoryId], references: [id])
}
