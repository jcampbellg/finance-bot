// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  HNL
  USD
}

enum Type {
  INCOME
  EXPENSE
}

enum PaymentMethod {
  CASH
  CREDITCARD
  DEBITCARD
  TRANSFER
}

model Conversion {
  id          Int      @id @default(autoincrement())
  dollarToHNL Float
  hnlToDollar Float
  createdAt   DateTime @default(now())
}

model User {
  id             Int           @id @default(autoincrement())
  chatId         Int           @unique
  fullName       String
  chatSubject    String
  chatSubSubject String[]
  chatHistory    String[]
  transactions   Transaction[]
  statement      Statement?    @relation(fields: [statementId], references: [id])
  statementId    Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Transaction {
  id            Int           @id @default(autoincrement())
  amount        Float
  description   String
  date          DateTime
  category      Category      @relation(fields: [categoryId], references: [id])
  categoryId    Int
  notes         String?
  currency      Currency
  type          Type
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  paymentMethod PaymentMethod
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Category {
  id           Int              @id @default(autoincrement())
  description  String
  transactions Transaction[]
  currency     Currency
  isFixed      Boolean
  notes        String?
  limit        Float
  budget       BudgetCategory[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model BudgetCategory {
  id          Int       @id @default(autoincrement())
  statement   Statement @relation(fields: [statementId], references: [id])
  statementId Int
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  limit       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Statement {
  id             Int              @id @default(autoincrement())
  month          Int
  year           Int
  incomes        Int[]
  budgetCategory BudgetCategory[]
  budgetIncome   BudgetIncome[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  User           User[]
}

model BudgetIncome {
  id          Int       @id @default(autoincrement())
  statement   Statement @relation(fields: [statementId], references: [id])
  statementId Int
  income      Income    @relation(fields: [incomeId], references: [id])
  incomeId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Income {
  id           String         @id @default(cuid())
  amount       Float
  source       String
  currency     Currency
  budgetIncome BudgetIncome[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}
