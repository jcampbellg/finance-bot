// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FileType {
  photo
  document
}

enum ConversationState {
  waitingForCommand
  onboarding
  books
  budget
  accounts
  categories
  limits
  payments
  new
  transactions
}

model Files {
  id        Int      @id @default(autoincrement())
  fileId    String
  fileType  FileType
  aiItems   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Limit     Limit?   @relation(fields: [limitId], references: [id])
  limitId   Int?
  Expense   Expense? @relation(fields: [expenseId], references: [id])
  expenseId Int?
  Payment   Payment? @relation(fields: [paymentId], references: [id])
  paymentId Int?
}

model ChatGroup {
  id        BigInt   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
}

model BookSelected {
  id        Int      @id @default(autoincrement())
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  chatId    BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  chatId    BigInt            @id @unique
  state     ConversationState @default(waitingForCommand)
  data      Json
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model User {
  id         BigInt      @id @unique
  firstName  String
  timezone   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  books      Book[]
  expenses   Expense[]
  budgets    Budget[]
  shareBooks ShareBook[]
}

model ConversionRate {
  id        Int      @id @default(autoincrement())
  from      String
  to        String
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
}

model ShareBook {
  id        Int      @id @default(autoincrement())
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  userId    BigInt?
  user      User?    @relation(fields: [userId], references: [id])
  shareKey  String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id             Int              @id @default(autoincrement())
  title          String
  ownerId        BigInt
  owner          User             @relation(fields: [ownerId], references: [id])
  share          ShareBook[]
  accounts       Account[]
  budgets        Budget[]
  expenses       Expense[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  currency       String?
  conversionRate ConversionRate[]
  chatGroup      ChatGroup[]
  bookSelected   BookSelected[]
}

model Account {
  id          Int       @id @default(autoincrement())
  description String
  Expense     Expense[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  book        Book      @relation(fields: [bookId], references: [id])
  bookId      Int
}

model Expense {
  id          Int      @id @default(autoincrement())
  description String
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  accountId   Int
  account     Account  @relation(fields: [accountId], references: [id])
  amount      Float
  files       Files[]
  notes       String?
  createdById BigInt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Book        Book?    @relation(fields: [bookId], references: [id])
  bookId      Int?
}

model Category {
  id          Int       @id @default(autoincrement())
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Budget      Budget?   @relation(fields: [budgetId], references: [id])
  budgetId    Int?
  limits      Limit[]
  expenses    Expense[]
}

model AmountCurrency {
  id        Int      @id @default(autoincrement())
  amount    Float
  currency  String
  limit     Limit?
  payment   Payment?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Limit {
  id             Int            @id @default(autoincrement())
  budgetId       Int
  budget         Budget         @relation(fields: [budgetId], references: [id])
  categoryId     Int
  category       Category       @relation(fields: [categoryId], references: [id])
  limitId        Int            @unique
  limit          AmountCurrency @relation(fields: [limitId], references: [id])
  files          Files[]
  ignoreInBudget Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Payment {
  id             Int            @id @default(autoincrement())
  Budget         Budget?        @relation(fields: [budgetId], references: [id])
  budgetId       Int?
  description    String
  amountId       Int            @unique
  amount         AmountCurrency @relation(fields: [amountId], references: [id])
  files          Files[]
  ignoreInBudget Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Budget {
  id          Int        @id @default(autoincrement())
  ownerId     BigInt
  owner       User       @relation(fields: [ownerId], references: [id])
  description String
  categories  Category[]
  limits      Limit[]
  payments    Payment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  book        Book       @relation(fields: [bookId], references: [id])
  bookId      Int
}
